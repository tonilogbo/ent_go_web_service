// Code generated by entc, DO NOT EDIT.

package album

const (
	// Label holds the string label denoting the album type in the database.
	Label = "album"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldReleaseYear holds the string denoting the release_year field in the database.
	FieldReleaseYear = "release_year"
	// EdgeBand holds the string denoting the band edge name in mutations.
	EdgeBand = "band"
	// EdgeArtist holds the string denoting the artist edge name in mutations.
	EdgeArtist = "artist"
	// Table holds the table name of the album in the database.
	Table = "albums"
	// BandTable is the table that holds the band relation/edge. The primary key declared below.
	BandTable = "band_albums"
	// BandInverseTable is the table name for the Band entity.
	// It exists in this package in order to avoid circular dependency with the "band" package.
	BandInverseTable = "bands"
	// ArtistTable is the table that holds the artist relation/edge. The primary key declared below.
	ArtistTable = "artist_albums"
	// ArtistInverseTable is the table name for the Artist entity.
	// It exists in this package in order to avoid circular dependency with the "artist" package.
	ArtistInverseTable = "artists"
)

// Columns holds all SQL columns for album fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldReleaseYear,
}

var (
	// BandPrimaryKey and BandColumn2 are the table columns denoting the
	// primary key for the band relation (M2M).
	BandPrimaryKey = []string{"band_id", "album_id"}
	// ArtistPrimaryKey and ArtistColumn2 are the table columns denoting the
	// primary key for the artist relation (M2M).
	ArtistPrimaryKey = []string{"artist_id", "album_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
