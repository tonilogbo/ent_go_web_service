// Code generated by entc, DO NOT EDIT.

package artist

const (
	// Label holds the string label denoting the artist type in the database.
	Label = "artist"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDateOfBirth holds the string denoting the date_of_birth field in the database.
	FieldDateOfBirth = "date_of_birth"
	// FieldGender holds the string denoting the gender field in the database.
	FieldGender = "gender"
	// EdgeBands holds the string denoting the bands edge name in mutations.
	EdgeBands = "bands"
	// EdgeAlbums holds the string denoting the albums edge name in mutations.
	EdgeAlbums = "albums"
	// EdgeAssociatedArtists holds the string denoting the associated_artists edge name in mutations.
	EdgeAssociatedArtists = "associated_artists"
	// EdgeLabel holds the string denoting the label edge name in mutations.
	EdgeLabel = "label"
	// Table holds the table name of the artist in the database.
	Table = "artists"
	// BandsTable is the table that holds the bands relation/edge. The primary key declared below.
	BandsTable = "band_members"
	// BandsInverseTable is the table name for the Band entity.
	// It exists in this package in order to avoid circular dependency with the "band" package.
	BandsInverseTable = "bands"
	// AlbumsTable is the table that holds the albums relation/edge. The primary key declared below.
	AlbumsTable = "artist_albums"
	// AlbumsInverseTable is the table name for the Album entity.
	// It exists in this package in order to avoid circular dependency with the "album" package.
	AlbumsInverseTable = "albums"
	// AssociatedArtistsTable is the table that holds the associated_artists relation/edge. The primary key declared below.
	AssociatedArtistsTable = "artist_associated_artists"
	// LabelTable is the table that holds the label relation/edge. The primary key declared below.
	LabelTable = "label_individual_artists"
	// LabelInverseTable is the table name for the Label entity.
	// It exists in this package in order to avoid circular dependency with the "label" package.
	LabelInverseTable = "labels"
)

// Columns holds all SQL columns for artist fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDateOfBirth,
	FieldGender,
}

var (
	// BandsPrimaryKey and BandsColumn2 are the table columns denoting the
	// primary key for the bands relation (M2M).
	BandsPrimaryKey = []string{"band_id", "artist_id"}
	// AlbumsPrimaryKey and AlbumsColumn2 are the table columns denoting the
	// primary key for the albums relation (M2M).
	AlbumsPrimaryKey = []string{"artist_id", "album_id"}
	// AssociatedArtistsPrimaryKey and AssociatedArtistsColumn2 are the table columns denoting the
	// primary key for the associated_artists relation (M2M).
	AssociatedArtistsPrimaryKey = []string{"artist_id", "associated_artist_id"}
	// LabelPrimaryKey and LabelColumn2 are the table columns denoting the
	// primary key for the label relation (M2M).
	LabelPrimaryKey = []string{"label_id", "artist_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
