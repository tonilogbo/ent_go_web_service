// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"entrds/ent/album"
	"entrds/ent/artist"
	"entrds/ent/band"
	"entrds/ent/label"
	"entrds/ent/predicate"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ArtistUpdate is the builder for updating Artist entities.
type ArtistUpdate struct {
	config
	hooks    []Hook
	mutation *ArtistMutation
}

// Where appends a list predicates to the ArtistUpdate builder.
func (au *ArtistUpdate) Where(ps ...predicate.Artist) *ArtistUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetName sets the "name" field.
func (au *ArtistUpdate) SetName(s string) *ArtistUpdate {
	au.mutation.SetName(s)
	return au
}

// SetDateOfBirth sets the "date_of_birth" field.
func (au *ArtistUpdate) SetDateOfBirth(t time.Time) *ArtistUpdate {
	au.mutation.SetDateOfBirth(t)
	return au
}

// SetNillableDateOfBirth sets the "date_of_birth" field if the given value is not nil.
func (au *ArtistUpdate) SetNillableDateOfBirth(t *time.Time) *ArtistUpdate {
	if t != nil {
		au.SetDateOfBirth(*t)
	}
	return au
}

// ClearDateOfBirth clears the value of the "date_of_birth" field.
func (au *ArtistUpdate) ClearDateOfBirth() *ArtistUpdate {
	au.mutation.ClearDateOfBirth()
	return au
}

// SetGender sets the "gender" field.
func (au *ArtistUpdate) SetGender(s string) *ArtistUpdate {
	au.mutation.SetGender(s)
	return au
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (au *ArtistUpdate) SetNillableGender(s *string) *ArtistUpdate {
	if s != nil {
		au.SetGender(*s)
	}
	return au
}

// ClearGender clears the value of the "gender" field.
func (au *ArtistUpdate) ClearGender() *ArtistUpdate {
	au.mutation.ClearGender()
	return au
}

// AddBandIDs adds the "bands" edge to the Band entity by IDs.
func (au *ArtistUpdate) AddBandIDs(ids ...int) *ArtistUpdate {
	au.mutation.AddBandIDs(ids...)
	return au
}

// AddBands adds the "bands" edges to the Band entity.
func (au *ArtistUpdate) AddBands(b ...*Band) *ArtistUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return au.AddBandIDs(ids...)
}

// AddAlbumIDs adds the "albums" edge to the Album entity by IDs.
func (au *ArtistUpdate) AddAlbumIDs(ids ...int) *ArtistUpdate {
	au.mutation.AddAlbumIDs(ids...)
	return au
}

// AddAlbums adds the "albums" edges to the Album entity.
func (au *ArtistUpdate) AddAlbums(a ...*Album) *ArtistUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddAlbumIDs(ids...)
}

// AddAssociatedArtistIDs adds the "associated_artists" edge to the Artist entity by IDs.
func (au *ArtistUpdate) AddAssociatedArtistIDs(ids ...int) *ArtistUpdate {
	au.mutation.AddAssociatedArtistIDs(ids...)
	return au
}

// AddAssociatedArtists adds the "associated_artists" edges to the Artist entity.
func (au *ArtistUpdate) AddAssociatedArtists(a ...*Artist) *ArtistUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddAssociatedArtistIDs(ids...)
}

// AddLabelIDs adds the "label" edge to the Label entity by IDs.
func (au *ArtistUpdate) AddLabelIDs(ids ...int) *ArtistUpdate {
	au.mutation.AddLabelIDs(ids...)
	return au
}

// AddLabel adds the "label" edges to the Label entity.
func (au *ArtistUpdate) AddLabel(l ...*Label) *ArtistUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return au.AddLabelIDs(ids...)
}

// Mutation returns the ArtistMutation object of the builder.
func (au *ArtistUpdate) Mutation() *ArtistMutation {
	return au.mutation
}

// ClearBands clears all "bands" edges to the Band entity.
func (au *ArtistUpdate) ClearBands() *ArtistUpdate {
	au.mutation.ClearBands()
	return au
}

// RemoveBandIDs removes the "bands" edge to Band entities by IDs.
func (au *ArtistUpdate) RemoveBandIDs(ids ...int) *ArtistUpdate {
	au.mutation.RemoveBandIDs(ids...)
	return au
}

// RemoveBands removes "bands" edges to Band entities.
func (au *ArtistUpdate) RemoveBands(b ...*Band) *ArtistUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return au.RemoveBandIDs(ids...)
}

// ClearAlbums clears all "albums" edges to the Album entity.
func (au *ArtistUpdate) ClearAlbums() *ArtistUpdate {
	au.mutation.ClearAlbums()
	return au
}

// RemoveAlbumIDs removes the "albums" edge to Album entities by IDs.
func (au *ArtistUpdate) RemoveAlbumIDs(ids ...int) *ArtistUpdate {
	au.mutation.RemoveAlbumIDs(ids...)
	return au
}

// RemoveAlbums removes "albums" edges to Album entities.
func (au *ArtistUpdate) RemoveAlbums(a ...*Album) *ArtistUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveAlbumIDs(ids...)
}

// ClearAssociatedArtists clears all "associated_artists" edges to the Artist entity.
func (au *ArtistUpdate) ClearAssociatedArtists() *ArtistUpdate {
	au.mutation.ClearAssociatedArtists()
	return au
}

// RemoveAssociatedArtistIDs removes the "associated_artists" edge to Artist entities by IDs.
func (au *ArtistUpdate) RemoveAssociatedArtistIDs(ids ...int) *ArtistUpdate {
	au.mutation.RemoveAssociatedArtistIDs(ids...)
	return au
}

// RemoveAssociatedArtists removes "associated_artists" edges to Artist entities.
func (au *ArtistUpdate) RemoveAssociatedArtists(a ...*Artist) *ArtistUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveAssociatedArtistIDs(ids...)
}

// ClearLabel clears all "label" edges to the Label entity.
func (au *ArtistUpdate) ClearLabel() *ArtistUpdate {
	au.mutation.ClearLabel()
	return au
}

// RemoveLabelIDs removes the "label" edge to Label entities by IDs.
func (au *ArtistUpdate) RemoveLabelIDs(ids ...int) *ArtistUpdate {
	au.mutation.RemoveLabelIDs(ids...)
	return au
}

// RemoveLabel removes "label" edges to Label entities.
func (au *ArtistUpdate) RemoveLabel(l ...*Label) *ArtistUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return au.RemoveLabelIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *ArtistUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(au.hooks) == 0 {
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ArtistMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			if au.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *ArtistUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *ArtistUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *ArtistUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *ArtistUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   artist.Table,
			Columns: artist.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: artist.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: artist.FieldName,
		})
	}
	if value, ok := au.mutation.DateOfBirth(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: artist.FieldDateOfBirth,
		})
	}
	if au.mutation.DateOfBirthCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: artist.FieldDateOfBirth,
		})
	}
	if value, ok := au.mutation.Gender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: artist.FieldGender,
		})
	}
	if au.mutation.GenderCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: artist.FieldGender,
		})
	}
	if au.mutation.BandsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artist.BandsTable,
			Columns: artist.BandsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: band.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedBandsIDs(); len(nodes) > 0 && !au.mutation.BandsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artist.BandsTable,
			Columns: artist.BandsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: band.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.BandsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artist.BandsTable,
			Columns: artist.BandsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: band.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.AlbumsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   artist.AlbumsTable,
			Columns: artist.AlbumsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: album.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedAlbumsIDs(); len(nodes) > 0 && !au.mutation.AlbumsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   artist.AlbumsTable,
			Columns: artist.AlbumsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: album.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AlbumsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   artist.AlbumsTable,
			Columns: artist.AlbumsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: album.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.AssociatedArtistsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   artist.AssociatedArtistsTable,
			Columns: artist.AssociatedArtistsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: artist.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedAssociatedArtistsIDs(); len(nodes) > 0 && !au.mutation.AssociatedArtistsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   artist.AssociatedArtistsTable,
			Columns: artist.AssociatedArtistsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: artist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AssociatedArtistsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   artist.AssociatedArtistsTable,
			Columns: artist.AssociatedArtistsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: artist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.LabelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artist.LabelTable,
			Columns: artist.LabelPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: label.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedLabelIDs(); len(nodes) > 0 && !au.mutation.LabelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artist.LabelTable,
			Columns: artist.LabelPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: label.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.LabelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artist.LabelTable,
			Columns: artist.LabelPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: label.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{artist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ArtistUpdateOne is the builder for updating a single Artist entity.
type ArtistUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ArtistMutation
}

// SetName sets the "name" field.
func (auo *ArtistUpdateOne) SetName(s string) *ArtistUpdateOne {
	auo.mutation.SetName(s)
	return auo
}

// SetDateOfBirth sets the "date_of_birth" field.
func (auo *ArtistUpdateOne) SetDateOfBirth(t time.Time) *ArtistUpdateOne {
	auo.mutation.SetDateOfBirth(t)
	return auo
}

// SetNillableDateOfBirth sets the "date_of_birth" field if the given value is not nil.
func (auo *ArtistUpdateOne) SetNillableDateOfBirth(t *time.Time) *ArtistUpdateOne {
	if t != nil {
		auo.SetDateOfBirth(*t)
	}
	return auo
}

// ClearDateOfBirth clears the value of the "date_of_birth" field.
func (auo *ArtistUpdateOne) ClearDateOfBirth() *ArtistUpdateOne {
	auo.mutation.ClearDateOfBirth()
	return auo
}

// SetGender sets the "gender" field.
func (auo *ArtistUpdateOne) SetGender(s string) *ArtistUpdateOne {
	auo.mutation.SetGender(s)
	return auo
}

// SetNillableGender sets the "gender" field if the given value is not nil.
func (auo *ArtistUpdateOne) SetNillableGender(s *string) *ArtistUpdateOne {
	if s != nil {
		auo.SetGender(*s)
	}
	return auo
}

// ClearGender clears the value of the "gender" field.
func (auo *ArtistUpdateOne) ClearGender() *ArtistUpdateOne {
	auo.mutation.ClearGender()
	return auo
}

// AddBandIDs adds the "bands" edge to the Band entity by IDs.
func (auo *ArtistUpdateOne) AddBandIDs(ids ...int) *ArtistUpdateOne {
	auo.mutation.AddBandIDs(ids...)
	return auo
}

// AddBands adds the "bands" edges to the Band entity.
func (auo *ArtistUpdateOne) AddBands(b ...*Band) *ArtistUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return auo.AddBandIDs(ids...)
}

// AddAlbumIDs adds the "albums" edge to the Album entity by IDs.
func (auo *ArtistUpdateOne) AddAlbumIDs(ids ...int) *ArtistUpdateOne {
	auo.mutation.AddAlbumIDs(ids...)
	return auo
}

// AddAlbums adds the "albums" edges to the Album entity.
func (auo *ArtistUpdateOne) AddAlbums(a ...*Album) *ArtistUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddAlbumIDs(ids...)
}

// AddAssociatedArtistIDs adds the "associated_artists" edge to the Artist entity by IDs.
func (auo *ArtistUpdateOne) AddAssociatedArtistIDs(ids ...int) *ArtistUpdateOne {
	auo.mutation.AddAssociatedArtistIDs(ids...)
	return auo
}

// AddAssociatedArtists adds the "associated_artists" edges to the Artist entity.
func (auo *ArtistUpdateOne) AddAssociatedArtists(a ...*Artist) *ArtistUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddAssociatedArtistIDs(ids...)
}

// AddLabelIDs adds the "label" edge to the Label entity by IDs.
func (auo *ArtistUpdateOne) AddLabelIDs(ids ...int) *ArtistUpdateOne {
	auo.mutation.AddLabelIDs(ids...)
	return auo
}

// AddLabel adds the "label" edges to the Label entity.
func (auo *ArtistUpdateOne) AddLabel(l ...*Label) *ArtistUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return auo.AddLabelIDs(ids...)
}

// Mutation returns the ArtistMutation object of the builder.
func (auo *ArtistUpdateOne) Mutation() *ArtistMutation {
	return auo.mutation
}

// ClearBands clears all "bands" edges to the Band entity.
func (auo *ArtistUpdateOne) ClearBands() *ArtistUpdateOne {
	auo.mutation.ClearBands()
	return auo
}

// RemoveBandIDs removes the "bands" edge to Band entities by IDs.
func (auo *ArtistUpdateOne) RemoveBandIDs(ids ...int) *ArtistUpdateOne {
	auo.mutation.RemoveBandIDs(ids...)
	return auo
}

// RemoveBands removes "bands" edges to Band entities.
func (auo *ArtistUpdateOne) RemoveBands(b ...*Band) *ArtistUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return auo.RemoveBandIDs(ids...)
}

// ClearAlbums clears all "albums" edges to the Album entity.
func (auo *ArtistUpdateOne) ClearAlbums() *ArtistUpdateOne {
	auo.mutation.ClearAlbums()
	return auo
}

// RemoveAlbumIDs removes the "albums" edge to Album entities by IDs.
func (auo *ArtistUpdateOne) RemoveAlbumIDs(ids ...int) *ArtistUpdateOne {
	auo.mutation.RemoveAlbumIDs(ids...)
	return auo
}

// RemoveAlbums removes "albums" edges to Album entities.
func (auo *ArtistUpdateOne) RemoveAlbums(a ...*Album) *ArtistUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveAlbumIDs(ids...)
}

// ClearAssociatedArtists clears all "associated_artists" edges to the Artist entity.
func (auo *ArtistUpdateOne) ClearAssociatedArtists() *ArtistUpdateOne {
	auo.mutation.ClearAssociatedArtists()
	return auo
}

// RemoveAssociatedArtistIDs removes the "associated_artists" edge to Artist entities by IDs.
func (auo *ArtistUpdateOne) RemoveAssociatedArtistIDs(ids ...int) *ArtistUpdateOne {
	auo.mutation.RemoveAssociatedArtistIDs(ids...)
	return auo
}

// RemoveAssociatedArtists removes "associated_artists" edges to Artist entities.
func (auo *ArtistUpdateOne) RemoveAssociatedArtists(a ...*Artist) *ArtistUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveAssociatedArtistIDs(ids...)
}

// ClearLabel clears all "label" edges to the Label entity.
func (auo *ArtistUpdateOne) ClearLabel() *ArtistUpdateOne {
	auo.mutation.ClearLabel()
	return auo
}

// RemoveLabelIDs removes the "label" edge to Label entities by IDs.
func (auo *ArtistUpdateOne) RemoveLabelIDs(ids ...int) *ArtistUpdateOne {
	auo.mutation.RemoveLabelIDs(ids...)
	return auo
}

// RemoveLabel removes "label" edges to Label entities.
func (auo *ArtistUpdateOne) RemoveLabel(l ...*Label) *ArtistUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return auo.RemoveLabelIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *ArtistUpdateOne) Select(field string, fields ...string) *ArtistUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Artist entity.
func (auo *ArtistUpdateOne) Save(ctx context.Context) (*Artist, error) {
	var (
		err  error
		node *Artist
	)
	if len(auo.hooks) == 0 {
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ArtistMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			if auo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *ArtistUpdateOne) SaveX(ctx context.Context) *Artist {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *ArtistUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *ArtistUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *ArtistUpdateOne) sqlSave(ctx context.Context) (_node *Artist, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   artist.Table,
			Columns: artist.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: artist.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Artist.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, artist.FieldID)
		for _, f := range fields {
			if !artist.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != artist.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: artist.FieldName,
		})
	}
	if value, ok := auo.mutation.DateOfBirth(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: artist.FieldDateOfBirth,
		})
	}
	if auo.mutation.DateOfBirthCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: artist.FieldDateOfBirth,
		})
	}
	if value, ok := auo.mutation.Gender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: artist.FieldGender,
		})
	}
	if auo.mutation.GenderCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: artist.FieldGender,
		})
	}
	if auo.mutation.BandsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artist.BandsTable,
			Columns: artist.BandsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: band.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedBandsIDs(); len(nodes) > 0 && !auo.mutation.BandsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artist.BandsTable,
			Columns: artist.BandsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: band.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.BandsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artist.BandsTable,
			Columns: artist.BandsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: band.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.AlbumsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   artist.AlbumsTable,
			Columns: artist.AlbumsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: album.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedAlbumsIDs(); len(nodes) > 0 && !auo.mutation.AlbumsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   artist.AlbumsTable,
			Columns: artist.AlbumsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: album.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AlbumsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   artist.AlbumsTable,
			Columns: artist.AlbumsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: album.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.AssociatedArtistsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   artist.AssociatedArtistsTable,
			Columns: artist.AssociatedArtistsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: artist.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedAssociatedArtistsIDs(); len(nodes) > 0 && !auo.mutation.AssociatedArtistsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   artist.AssociatedArtistsTable,
			Columns: artist.AssociatedArtistsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: artist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AssociatedArtistsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   artist.AssociatedArtistsTable,
			Columns: artist.AssociatedArtistsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: artist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.LabelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artist.LabelTable,
			Columns: artist.LabelPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: label.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedLabelIDs(); len(nodes) > 0 && !auo.mutation.LabelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artist.LabelTable,
			Columns: artist.LabelPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: label.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.LabelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   artist.LabelTable,
			Columns: artist.LabelPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: label.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Artist{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{artist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
