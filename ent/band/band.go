// Code generated by entc, DO NOT EDIT.

package band

const (
	// Label holds the string label denoting the band type in the database.
	Label = "band"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldYearFormed holds the string denoting the year_formed field in the database.
	FieldYearFormed = "year_formed"
	// EdgeMembers holds the string denoting the members edge name in mutations.
	EdgeMembers = "members"
	// EdgeAlbums holds the string denoting the albums edge name in mutations.
	EdgeAlbums = "albums"
	// EdgeAssociatedBands holds the string denoting the associated_bands edge name in mutations.
	EdgeAssociatedBands = "associated_bands"
	// EdgeLabel holds the string denoting the label edge name in mutations.
	EdgeLabel = "label"
	// Table holds the table name of the band in the database.
	Table = "bands"
	// MembersTable is the table that holds the members relation/edge. The primary key declared below.
	MembersTable = "band_members"
	// MembersInverseTable is the table name for the Artist entity.
	// It exists in this package in order to avoid circular dependency with the "artist" package.
	MembersInverseTable = "artists"
	// AlbumsTable is the table that holds the albums relation/edge. The primary key declared below.
	AlbumsTable = "band_albums"
	// AlbumsInverseTable is the table name for the Album entity.
	// It exists in this package in order to avoid circular dependency with the "album" package.
	AlbumsInverseTable = "albums"
	// AssociatedBandsTable is the table that holds the associated_bands relation/edge. The primary key declared below.
	AssociatedBandsTable = "band_associated_bands"
	// LabelTable is the table that holds the label relation/edge. The primary key declared below.
	LabelTable = "label_bands"
	// LabelInverseTable is the table name for the Label entity.
	// It exists in this package in order to avoid circular dependency with the "label" package.
	LabelInverseTable = "labels"
)

// Columns holds all SQL columns for band fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldYearFormed,
}

var (
	// MembersPrimaryKey and MembersColumn2 are the table columns denoting the
	// primary key for the members relation (M2M).
	MembersPrimaryKey = []string{"band_id", "artist_id"}
	// AlbumsPrimaryKey and AlbumsColumn2 are the table columns denoting the
	// primary key for the albums relation (M2M).
	AlbumsPrimaryKey = []string{"band_id", "album_id"}
	// AssociatedBandsPrimaryKey and AssociatedBandsColumn2 are the table columns denoting the
	// primary key for the associated_bands relation (M2M).
	AssociatedBandsPrimaryKey = []string{"band_id", "associated_band_id"}
	// LabelPrimaryKey and LabelColumn2 are the table columns denoting the
	// primary key for the label relation (M2M).
	LabelPrimaryKey = []string{"label_id", "band_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
