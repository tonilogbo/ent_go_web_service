// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"entrds/ent/album"
	"entrds/ent/artist"
	"entrds/ent/band"
	"entrds/ent/label"
	"entrds/ent/predicate"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BandUpdate is the builder for updating Band entities.
type BandUpdate struct {
	config
	hooks    []Hook
	mutation *BandMutation
}

// Where appends a list predicates to the BandUpdate builder.
func (bu *BandUpdate) Where(ps ...predicate.Band) *BandUpdate {
	bu.mutation.Where(ps...)
	return bu
}

// SetName sets the "name" field.
func (bu *BandUpdate) SetName(s string) *BandUpdate {
	bu.mutation.SetName(s)
	return bu
}

// SetYearFormed sets the "year_formed" field.
func (bu *BandUpdate) SetYearFormed(i int) *BandUpdate {
	bu.mutation.ResetYearFormed()
	bu.mutation.SetYearFormed(i)
	return bu
}

// SetNillableYearFormed sets the "year_formed" field if the given value is not nil.
func (bu *BandUpdate) SetNillableYearFormed(i *int) *BandUpdate {
	if i != nil {
		bu.SetYearFormed(*i)
	}
	return bu
}

// AddYearFormed adds i to the "year_formed" field.
func (bu *BandUpdate) AddYearFormed(i int) *BandUpdate {
	bu.mutation.AddYearFormed(i)
	return bu
}

// ClearYearFormed clears the value of the "year_formed" field.
func (bu *BandUpdate) ClearYearFormed() *BandUpdate {
	bu.mutation.ClearYearFormed()
	return bu
}

// AddMemberIDs adds the "members" edge to the Artist entity by IDs.
func (bu *BandUpdate) AddMemberIDs(ids ...int) *BandUpdate {
	bu.mutation.AddMemberIDs(ids...)
	return bu
}

// AddMembers adds the "members" edges to the Artist entity.
func (bu *BandUpdate) AddMembers(a ...*Artist) *BandUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return bu.AddMemberIDs(ids...)
}

// AddAlbumIDs adds the "albums" edge to the Album entity by IDs.
func (bu *BandUpdate) AddAlbumIDs(ids ...int) *BandUpdate {
	bu.mutation.AddAlbumIDs(ids...)
	return bu
}

// AddAlbums adds the "albums" edges to the Album entity.
func (bu *BandUpdate) AddAlbums(a ...*Album) *BandUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return bu.AddAlbumIDs(ids...)
}

// AddAssociatedBandIDs adds the "associated_bands" edge to the Band entity by IDs.
func (bu *BandUpdate) AddAssociatedBandIDs(ids ...int) *BandUpdate {
	bu.mutation.AddAssociatedBandIDs(ids...)
	return bu
}

// AddAssociatedBands adds the "associated_bands" edges to the Band entity.
func (bu *BandUpdate) AddAssociatedBands(b ...*Band) *BandUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bu.AddAssociatedBandIDs(ids...)
}

// AddLabelIDs adds the "label" edge to the Label entity by IDs.
func (bu *BandUpdate) AddLabelIDs(ids ...int) *BandUpdate {
	bu.mutation.AddLabelIDs(ids...)
	return bu
}

// AddLabel adds the "label" edges to the Label entity.
func (bu *BandUpdate) AddLabel(l ...*Label) *BandUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return bu.AddLabelIDs(ids...)
}

// Mutation returns the BandMutation object of the builder.
func (bu *BandUpdate) Mutation() *BandMutation {
	return bu.mutation
}

// ClearMembers clears all "members" edges to the Artist entity.
func (bu *BandUpdate) ClearMembers() *BandUpdate {
	bu.mutation.ClearMembers()
	return bu
}

// RemoveMemberIDs removes the "members" edge to Artist entities by IDs.
func (bu *BandUpdate) RemoveMemberIDs(ids ...int) *BandUpdate {
	bu.mutation.RemoveMemberIDs(ids...)
	return bu
}

// RemoveMembers removes "members" edges to Artist entities.
func (bu *BandUpdate) RemoveMembers(a ...*Artist) *BandUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return bu.RemoveMemberIDs(ids...)
}

// ClearAlbums clears all "albums" edges to the Album entity.
func (bu *BandUpdate) ClearAlbums() *BandUpdate {
	bu.mutation.ClearAlbums()
	return bu
}

// RemoveAlbumIDs removes the "albums" edge to Album entities by IDs.
func (bu *BandUpdate) RemoveAlbumIDs(ids ...int) *BandUpdate {
	bu.mutation.RemoveAlbumIDs(ids...)
	return bu
}

// RemoveAlbums removes "albums" edges to Album entities.
func (bu *BandUpdate) RemoveAlbums(a ...*Album) *BandUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return bu.RemoveAlbumIDs(ids...)
}

// ClearAssociatedBands clears all "associated_bands" edges to the Band entity.
func (bu *BandUpdate) ClearAssociatedBands() *BandUpdate {
	bu.mutation.ClearAssociatedBands()
	return bu
}

// RemoveAssociatedBandIDs removes the "associated_bands" edge to Band entities by IDs.
func (bu *BandUpdate) RemoveAssociatedBandIDs(ids ...int) *BandUpdate {
	bu.mutation.RemoveAssociatedBandIDs(ids...)
	return bu
}

// RemoveAssociatedBands removes "associated_bands" edges to Band entities.
func (bu *BandUpdate) RemoveAssociatedBands(b ...*Band) *BandUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return bu.RemoveAssociatedBandIDs(ids...)
}

// ClearLabel clears all "label" edges to the Label entity.
func (bu *BandUpdate) ClearLabel() *BandUpdate {
	bu.mutation.ClearLabel()
	return bu
}

// RemoveLabelIDs removes the "label" edge to Label entities by IDs.
func (bu *BandUpdate) RemoveLabelIDs(ids ...int) *BandUpdate {
	bu.mutation.RemoveLabelIDs(ids...)
	return bu
}

// RemoveLabel removes "label" edges to Label entities.
func (bu *BandUpdate) RemoveLabel(l ...*Label) *BandUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return bu.RemoveLabelIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bu *BandUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(bu.hooks) == 0 {
		affected, err = bu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BandMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			bu.mutation = mutation
			affected, err = bu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(bu.hooks) - 1; i >= 0; i-- {
			if bu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (bu *BandUpdate) SaveX(ctx context.Context) int {
	affected, err := bu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bu *BandUpdate) Exec(ctx context.Context) error {
	_, err := bu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bu *BandUpdate) ExecX(ctx context.Context) {
	if err := bu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (bu *BandUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   band.Table,
			Columns: band.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: band.FieldID,
			},
		},
	}
	if ps := bu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: band.FieldName,
		})
	}
	if value, ok := bu.mutation.YearFormed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: band.FieldYearFormed,
		})
	}
	if value, ok := bu.mutation.AddedYearFormed(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: band.FieldYearFormed,
		})
	}
	if bu.mutation.YearFormedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: band.FieldYearFormed,
		})
	}
	if bu.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   band.MembersTable,
			Columns: band.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: artist.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedMembersIDs(); len(nodes) > 0 && !bu.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   band.MembersTable,
			Columns: band.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: artist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   band.MembersTable,
			Columns: band.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: artist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.AlbumsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   band.AlbumsTable,
			Columns: band.AlbumsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: album.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedAlbumsIDs(); len(nodes) > 0 && !bu.mutation.AlbumsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   band.AlbumsTable,
			Columns: band.AlbumsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: album.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.AlbumsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   band.AlbumsTable,
			Columns: band.AlbumsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: album.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.AssociatedBandsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   band.AssociatedBandsTable,
			Columns: band.AssociatedBandsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: band.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedAssociatedBandsIDs(); len(nodes) > 0 && !bu.mutation.AssociatedBandsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   band.AssociatedBandsTable,
			Columns: band.AssociatedBandsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: band.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.AssociatedBandsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   band.AssociatedBandsTable,
			Columns: band.AssociatedBandsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: band.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bu.mutation.LabelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   band.LabelTable,
			Columns: band.LabelPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: label.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.RemovedLabelIDs(); len(nodes) > 0 && !bu.mutation.LabelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   band.LabelTable,
			Columns: band.LabelPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: label.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bu.mutation.LabelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   band.LabelTable,
			Columns: band.LabelPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: label.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{band.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// BandUpdateOne is the builder for updating a single Band entity.
type BandUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BandMutation
}

// SetName sets the "name" field.
func (buo *BandUpdateOne) SetName(s string) *BandUpdateOne {
	buo.mutation.SetName(s)
	return buo
}

// SetYearFormed sets the "year_formed" field.
func (buo *BandUpdateOne) SetYearFormed(i int) *BandUpdateOne {
	buo.mutation.ResetYearFormed()
	buo.mutation.SetYearFormed(i)
	return buo
}

// SetNillableYearFormed sets the "year_formed" field if the given value is not nil.
func (buo *BandUpdateOne) SetNillableYearFormed(i *int) *BandUpdateOne {
	if i != nil {
		buo.SetYearFormed(*i)
	}
	return buo
}

// AddYearFormed adds i to the "year_formed" field.
func (buo *BandUpdateOne) AddYearFormed(i int) *BandUpdateOne {
	buo.mutation.AddYearFormed(i)
	return buo
}

// ClearYearFormed clears the value of the "year_formed" field.
func (buo *BandUpdateOne) ClearYearFormed() *BandUpdateOne {
	buo.mutation.ClearYearFormed()
	return buo
}

// AddMemberIDs adds the "members" edge to the Artist entity by IDs.
func (buo *BandUpdateOne) AddMemberIDs(ids ...int) *BandUpdateOne {
	buo.mutation.AddMemberIDs(ids...)
	return buo
}

// AddMembers adds the "members" edges to the Artist entity.
func (buo *BandUpdateOne) AddMembers(a ...*Artist) *BandUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return buo.AddMemberIDs(ids...)
}

// AddAlbumIDs adds the "albums" edge to the Album entity by IDs.
func (buo *BandUpdateOne) AddAlbumIDs(ids ...int) *BandUpdateOne {
	buo.mutation.AddAlbumIDs(ids...)
	return buo
}

// AddAlbums adds the "albums" edges to the Album entity.
func (buo *BandUpdateOne) AddAlbums(a ...*Album) *BandUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return buo.AddAlbumIDs(ids...)
}

// AddAssociatedBandIDs adds the "associated_bands" edge to the Band entity by IDs.
func (buo *BandUpdateOne) AddAssociatedBandIDs(ids ...int) *BandUpdateOne {
	buo.mutation.AddAssociatedBandIDs(ids...)
	return buo
}

// AddAssociatedBands adds the "associated_bands" edges to the Band entity.
func (buo *BandUpdateOne) AddAssociatedBands(b ...*Band) *BandUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return buo.AddAssociatedBandIDs(ids...)
}

// AddLabelIDs adds the "label" edge to the Label entity by IDs.
func (buo *BandUpdateOne) AddLabelIDs(ids ...int) *BandUpdateOne {
	buo.mutation.AddLabelIDs(ids...)
	return buo
}

// AddLabel adds the "label" edges to the Label entity.
func (buo *BandUpdateOne) AddLabel(l ...*Label) *BandUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return buo.AddLabelIDs(ids...)
}

// Mutation returns the BandMutation object of the builder.
func (buo *BandUpdateOne) Mutation() *BandMutation {
	return buo.mutation
}

// ClearMembers clears all "members" edges to the Artist entity.
func (buo *BandUpdateOne) ClearMembers() *BandUpdateOne {
	buo.mutation.ClearMembers()
	return buo
}

// RemoveMemberIDs removes the "members" edge to Artist entities by IDs.
func (buo *BandUpdateOne) RemoveMemberIDs(ids ...int) *BandUpdateOne {
	buo.mutation.RemoveMemberIDs(ids...)
	return buo
}

// RemoveMembers removes "members" edges to Artist entities.
func (buo *BandUpdateOne) RemoveMembers(a ...*Artist) *BandUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return buo.RemoveMemberIDs(ids...)
}

// ClearAlbums clears all "albums" edges to the Album entity.
func (buo *BandUpdateOne) ClearAlbums() *BandUpdateOne {
	buo.mutation.ClearAlbums()
	return buo
}

// RemoveAlbumIDs removes the "albums" edge to Album entities by IDs.
func (buo *BandUpdateOne) RemoveAlbumIDs(ids ...int) *BandUpdateOne {
	buo.mutation.RemoveAlbumIDs(ids...)
	return buo
}

// RemoveAlbums removes "albums" edges to Album entities.
func (buo *BandUpdateOne) RemoveAlbums(a ...*Album) *BandUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return buo.RemoveAlbumIDs(ids...)
}

// ClearAssociatedBands clears all "associated_bands" edges to the Band entity.
func (buo *BandUpdateOne) ClearAssociatedBands() *BandUpdateOne {
	buo.mutation.ClearAssociatedBands()
	return buo
}

// RemoveAssociatedBandIDs removes the "associated_bands" edge to Band entities by IDs.
func (buo *BandUpdateOne) RemoveAssociatedBandIDs(ids ...int) *BandUpdateOne {
	buo.mutation.RemoveAssociatedBandIDs(ids...)
	return buo
}

// RemoveAssociatedBands removes "associated_bands" edges to Band entities.
func (buo *BandUpdateOne) RemoveAssociatedBands(b ...*Band) *BandUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return buo.RemoveAssociatedBandIDs(ids...)
}

// ClearLabel clears all "label" edges to the Label entity.
func (buo *BandUpdateOne) ClearLabel() *BandUpdateOne {
	buo.mutation.ClearLabel()
	return buo
}

// RemoveLabelIDs removes the "label" edge to Label entities by IDs.
func (buo *BandUpdateOne) RemoveLabelIDs(ids ...int) *BandUpdateOne {
	buo.mutation.RemoveLabelIDs(ids...)
	return buo
}

// RemoveLabel removes "label" edges to Label entities.
func (buo *BandUpdateOne) RemoveLabel(l ...*Label) *BandUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return buo.RemoveLabelIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (buo *BandUpdateOne) Select(field string, fields ...string) *BandUpdateOne {
	buo.fields = append([]string{field}, fields...)
	return buo
}

// Save executes the query and returns the updated Band entity.
func (buo *BandUpdateOne) Save(ctx context.Context) (*Band, error) {
	var (
		err  error
		node *Band
	)
	if len(buo.hooks) == 0 {
		node, err = buo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BandMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			buo.mutation = mutation
			node, err = buo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(buo.hooks) - 1; i >= 0; i-- {
			if buo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = buo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, buo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (buo *BandUpdateOne) SaveX(ctx context.Context) *Band {
	node, err := buo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (buo *BandUpdateOne) Exec(ctx context.Context) error {
	_, err := buo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (buo *BandUpdateOne) ExecX(ctx context.Context) {
	if err := buo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (buo *BandUpdateOne) sqlSave(ctx context.Context) (_node *Band, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   band.Table,
			Columns: band.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: band.FieldID,
			},
		},
	}
	id, ok := buo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Band.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := buo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, band.FieldID)
		for _, f := range fields {
			if !band.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != band.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := buo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := buo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: band.FieldName,
		})
	}
	if value, ok := buo.mutation.YearFormed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: band.FieldYearFormed,
		})
	}
	if value, ok := buo.mutation.AddedYearFormed(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: band.FieldYearFormed,
		})
	}
	if buo.mutation.YearFormedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: band.FieldYearFormed,
		})
	}
	if buo.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   band.MembersTable,
			Columns: band.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: artist.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedMembersIDs(); len(nodes) > 0 && !buo.mutation.MembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   band.MembersTable,
			Columns: band.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: artist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.MembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   band.MembersTable,
			Columns: band.MembersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: artist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.AlbumsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   band.AlbumsTable,
			Columns: band.AlbumsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: album.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedAlbumsIDs(); len(nodes) > 0 && !buo.mutation.AlbumsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   band.AlbumsTable,
			Columns: band.AlbumsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: album.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.AlbumsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   band.AlbumsTable,
			Columns: band.AlbumsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: album.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.AssociatedBandsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   band.AssociatedBandsTable,
			Columns: band.AssociatedBandsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: band.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedAssociatedBandsIDs(); len(nodes) > 0 && !buo.mutation.AssociatedBandsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   band.AssociatedBandsTable,
			Columns: band.AssociatedBandsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: band.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.AssociatedBandsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   band.AssociatedBandsTable,
			Columns: band.AssociatedBandsPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: band.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if buo.mutation.LabelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   band.LabelTable,
			Columns: band.LabelPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: label.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.RemovedLabelIDs(); len(nodes) > 0 && !buo.mutation.LabelCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   band.LabelTable,
			Columns: band.LabelPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: label.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := buo.mutation.LabelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   band.LabelTable,
			Columns: band.LabelPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: label.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Band{config: buo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, buo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{band.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
