// Code generated by entc, DO NOT EDIT.

package label

const (
	// Label holds the string label denoting the label type in the database.
	Label = "label"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldYearEstablished holds the string denoting the year_established field in the database.
	FieldYearEstablished = "year_established"
	// EdgeIndividualArtists holds the string denoting the individual_artists edge name in mutations.
	EdgeIndividualArtists = "individual_artists"
	// EdgeBands holds the string denoting the bands edge name in mutations.
	EdgeBands = "bands"
	// Table holds the table name of the label in the database.
	Table = "labels"
	// IndividualArtistsTable is the table that holds the individual_artists relation/edge. The primary key declared below.
	IndividualArtistsTable = "label_individual_artists"
	// IndividualArtistsInverseTable is the table name for the Artist entity.
	// It exists in this package in order to avoid circular dependency with the "artist" package.
	IndividualArtistsInverseTable = "artists"
	// BandsTable is the table that holds the bands relation/edge. The primary key declared below.
	BandsTable = "label_bands"
	// BandsInverseTable is the table name for the Band entity.
	// It exists in this package in order to avoid circular dependency with the "band" package.
	BandsInverseTable = "bands"
)

// Columns holds all SQL columns for label fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldYearEstablished,
}

var (
	// IndividualArtistsPrimaryKey and IndividualArtistsColumn2 are the table columns denoting the
	// primary key for the individual_artists relation (M2M).
	IndividualArtistsPrimaryKey = []string{"label_id", "artist_id"}
	// BandsPrimaryKey and BandsColumn2 are the table columns denoting the
	// primary key for the bands relation (M2M).
	BandsPrimaryKey = []string{"label_id", "band_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
